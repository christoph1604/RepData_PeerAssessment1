avgs_2<-replicate(n_sim, mean(rexp(n_draws_2, rate=lambda)))
#Normalize averages
mean_exp<-1/lambda
sd_exp<-1/lambda
avgs_norm_1<-(avgs_1-mean_exp)/(sd_exp/sqrt(n_draws))
avgs_norm_2<-(avgs_2-mean_exp)/(sd_exp/sqrt(n_draws_2))
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws, n_draws_2), n_sim, n_sim)))
#Display averages and standard normal distribution
g5<-ggplot(data=df_avgs_norm, aes(x=avgs_norm))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
stat_function(fun=dnorm, size=2)+
xlab("x")+
ylab("dnorm(x, avgs_mean, avgs_sd/sqrt(n_draws))")+
facet_grid(. ~ size)
g5
library(ggplot2)
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
n_draws_2<-1  #Smaller number of draws per repetition (for comparison)
lambda<-0.2   #Used lambda value
#Take random sample from the exponential distribution
exp_samples<-rexp(n=n_sim, rate=lambda)
df_values<-data.frame(exp_samples)
#Random draw and storage of the result in dataframe
avgs_1<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_2<-replicate(n_sim, mean(rexp(n_draws_2, rate=lambda)))
#Normalize averages
mean_exp<-1/lambda
sd_exp<-1/lambda
avgs_norm_1<-(avgs_1-mean_exp)/(sd_exp/sqrt(n_draws))
avgs_norm_2<-(avgs_2-mean_exp)/(sd_exp/sqrt(n_draws_2))
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws, n_draws_2), n_sim, n_sim)))
#Display averages and standard normal distribution
g5<-ggplot(data=df_avgs_norm, aes(x=avgs_norm))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
stat_function(fun=dnorm, size=2)+
xlab("x")+
ylab("dnorm(x, avgs_mean, avgs_sd/sqrt(n_draws))")+
facet_grid(. ~ size)
g5
hist(avgs_norm_1)
lines(avgs_norm_1)
plot(avgs_norm_1)
plot(density(avgs_norm_1))
plot(density(avgs_norm_2))
head(avgs_norm_1)
head(avgs_norm_2)
View(df_avgs_norm)
?rep
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws, n_draws_2), c(n_sim, n_sim))))
View(df_avgs_norm)
library(ggplot2)
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
n_draws_2<-1  #Smaller number of draws per repetition (for comparison)
lambda<-0.2   #Used lambda value
#Take random sample from the exponential distribution
exp_samples<-rexp(n=n_sim, rate=lambda)
df_values<-data.frame(exp_samples)
#Random draw and storage of the result in dataframe
avgs_1<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_2<-replicate(n_sim, mean(rexp(n_draws_2, rate=lambda)))
#Normalize averages
mean_exp<-1/lambda
sd_exp<-1/lambda
avgs_norm_1<-(avgs_1-mean_exp)/(sd_exp/sqrt(n_draws))
avgs_norm_2<-(avgs_2-mean_exp)/(sd_exp/sqrt(n_draws_2))
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws, n_draws_2), c(n_sim, n_sim))))
#Display averages and standard normal distribution
g5<-ggplot(data=df_avgs_norm, aes(x=avgs_norm))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
stat_function(fun=dnorm, size=2)+
xlab("x")+
ylab("dnorm(x, avgs_mean, avgs_sd/sqrt(n_draws))")+
facet_grid(. ~ size)
g5
library(ggplot2)
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-400   #Number of draws per repetition
n_draws_2<-1  #Smaller number of draws per repetition (for comparison)
lambda<-0.2   #Used lambda value
#Take random sample from the exponential distribution
exp_samples<-rexp(n=n_sim, rate=lambda)
df_values<-data.frame(exp_samples)
#Random draw and storage of the result in dataframe
avgs_1<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_2<-replicate(n_sim, mean(rexp(n_draws_2, rate=lambda)))
#Normalize averages
mean_exp<-1/lambda
sd_exp<-1/lambda
avgs_norm_1<-(avgs_1-mean_exp)/(sd_exp/sqrt(n_draws))
avgs_norm_2<-(avgs_2-mean_exp)/(sd_exp/sqrt(n_draws_2))
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws, n_draws_2), c(n_sim, n_sim))))
#Display averages and standard normal distribution
g5<-ggplot(data=df_avgs_norm, aes(x=avgs_norm))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
stat_function(fun=dnorm, size=2)+
xlab("x")+
ylab("dnorm(x, avgs_mean, avgs_sd/sqrt(n_draws))")+
facet_grid(. ~ size)
g5
library(ggplot2)
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
n_draws_2<-1  #Smaller number of draws per repetition (for comparison)
lambda<-0.2   #Used lambda value
#Take random sample from the exponential distribution
exp_samples<-rexp(n=n_sim, rate=lambda)
df_values<-data.frame(exp_samples)
#Random draw and storage of the result in dataframe
avgs_1<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_2<-replicate(n_sim, mean(rexp(n_draws_2, rate=lambda)))
#Normalize averages
mean_exp<-1/lambda
sd_exp<-1/lambda
avgs_norm_1<-(avgs_1-mean_exp)/(sd_exp/sqrt(n_draws))
avgs_norm_2<-(avgs_2-mean_exp)/(sd_exp/sqrt(n_draws_2))
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws, n_draws_2), c(n_sim, n_sim))))
#Display averages and standard normal distribution
g5<-ggplot(data=df_avgs_norm, aes(x=avgs_norm))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
stat_function(fun=dnorm, size=2)+
xlab("x")+
ylab("dnorm(x, avgs_mean, avgs_sd/sqrt(n_draws))")+
facet_grid(. ~ size)
g5
rep(2,1)
rep(2,2)
rep(c(1,2),2)
rep(c(1,2),2,2)
rep(c(1,2),2,3)
rep(c(1,2),2)
rep(c(1,2),c(1,1))
rep(c(1,2),c(1,2))
rep(c(1,40),c(10,10))
View(df_avgs_norm)
df_avgs_norm<-data.frame(avgs_norm=c(avgs_norm_1, avgs_norm_2), size=factor(rep(c(n_draws_1, n_draws_2), c(n_sim, n_sim))))
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
xlim(1, 9)
g1
avgs
which(avgs==na)
which(avgs==NA)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
coord_cartesian(xlim(1, 9))
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
coord_cartesian(xlim(1, 9))
g1
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
coord_cartesian(xlim=c(1, 9))
g1
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
coord_cartesian(xlim=c(1, 9))
g1
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
# coord_cartesian(xlim=c(1, 9))
xlim(1,9)
g1
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
coord_cartesian(xlim=c(1, 9))
#  xlim(1,9)
g1
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
# coord_cartesian(xlim=c(1, 9))
xlim(0,10)
g1
set.seed(42)  #Setting seed for reproducibility
n_sim<-1000   #Number of repetitions of the simulation
n_draws<-40   #Number of draws per repetition
lambda<-0.2   #Used lambda value
#Random draw and storage of the result in dataframe
avgs<-replicate(n_sim, mean(rexp(n_draws, rate=lambda)))
avgs_df<-data.frame(avgs)
#Display of the random draws in a historgram (interval [1;9]) and a smoothed density graph
g1<-ggplot(avgs_df, aes(x=avgs))+
geom_histogram(aes(y=..density..), binwidth=0.2, colour="black", fill="white")+
geom_density(alpha=0.2, fill="#FF6666")+xlab("x")+ylab("Density of mean value")+
coord_cartesian(xlim=c(0,10))
# xlim(0,10)
g1
which(avgs>9)
which(avgs<1)
which(avgs>7)
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('tinytex')
tinytex::install_tinytex()
tinytex:::is_tinytex()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
options(tinytex.verbose = TRUE)
options(tinytex.verbose = FALSE)
Sys.which('pdflatex')
install.packages('tinytex')
tinytex::install_tinytex()
library(toothgrowth)
data("ToothGrowth")
force(ToothGrowth)
headh(ToothGrowth)
head(ToothGrowth)
str(ToothGrowth)
?ToothGrowth
data<-ToothGrowth
duplicated(data$supp)
which(duplicated(data$supp))
unique(data$supp)
summary(dataset)
summary(data)
unique(dose)
unique(data$dose)
hist(data$len)
plot(data$len)
boxplot(data$len)
rug(data$len)
hist(data$len)
xfit<-seq(min(data$len), max(data$len), length=40)
yfit<-dnorm(xfit, mean=mean(data$len), sd=sd(data$len))
h<-hist(data$len)
View(h)
h$mids[1:2]
diff(h$mids[1:2])
yfit<-yfit*diff(h$mids[1:2])*length(x)
yfit<-yfit*diff(h$mids[1:2])*length(data$len)
lines(xfit, yfit, col="blue", lwd=2)
density(data$len)
d<-density(data$len)
View(d)
plot(d)
?hist
hist(data$len, breaks=10)
hist(data$len, breaks=20)
hist(data$len, breaks=30)
hist(data$len, breaks=40)
hist(data$len, breaks=100)
hist(data$len, breaks=10)
data[1]$len
data$len
data[1,]$len
data[,"OJ"]$len
subset(data, sup="OV")
subset(data, sup="VC")
str(data)
subset(data, supp="VC")
subset(data, supp=="VC")
hist(subset(data, supp=="VC"))
hist(subset(data, supp=="VC")$len)
hist(subset(data, supp=="OJ")$len)
summary(data)
str(data)
hist(data, breaks=10)
hist(data$len, breaks=10)
hist(data$len, breaks=20)
hist(data$len, breaks=5)
hist(data$len, breaks=2)
hist(data$len, breaks=10)
hist(data$len, breaks=5)
hist(data$len, breaks=10)
hist(data$len, breaks=15)
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_density()
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(y=len))+geom_density()
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_density()
plot(density(data$len))
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_density()+facet_grid(rows=vars(supp))
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_density()+facet_grid(rows=vars(supp), cols=vars(dose))
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_points()+facet_grid(rows=vars(supp), cols=vars(dose))
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_point()+facet_grid(rows=vars(supp), cols=vars(dose))
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_density()+facet_grid(rows=vars(supp), cols=vars(dose))
ggplot(data, aes(x=dose, y=len))+geom_points()
ggplot(data, aes(x=dose, y=len))+geom_points()
ggplot(data, aes(x=dose, y=len))+geom_point()
ggplot(data, aes(x=dose, y=len))+geom_point()+facet_grid(rows=vars(supp))
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
ggplot(data, aes(x=len))+geom_density()+facet_grid(rows=vars(supp), cols=vars(dose))
ggplot(data, aes(x=dose, y=len))+geom_point()+facet_grid(cols=vars(supp))
ggplot(data, aes(x=len))+geom_density()+facet_grid(rows=vars(supp), cols=vars(dose))
ggplot(data, aes(x=supp, y=len))+geom_point()
?t.test
data
data[data[,2]==OJ]
data[data[,2]=="OJ"]
data[data[,2]="OJ"]
data[,2]
data[data[,2]=="OJ",]
t.test(data_OJ, data_VC, paired=FALSE, var.equal=FALSE, alternative="two.sided", conf.level=0.05)
data_OJ<-data[1,data[,2]=="OJ"]
data_VC<-data[1,data[,2]=="VC"]
data_OJ<-data[data[,2]=="OJ",1]
data_VC<-data[data[,2]=="VC",1]
t.test(data_OJ, data_VC, paired=FALSE, var.equal=FALSE, alternative="two.sided", conf.level=0.05)
mean(data_OJ)
ggplot(data, aes(x=supp, y=len))+geom_point()
t.test(data_OJ, data_VC, paired=FALSE, var.equal=FALSE, alternative="two.sided", conf.level=0.95)
t_1<-t.test(data_OJ, data_VC, paired=FALSE, var.equal=FALSE, alternative="two.sided", conf.level=0.05)
t_1$conf.int
t_1$conf.int[1]
summary(data)
unique(data[,3])
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
data_05<-data[data[,3]==0.5,1]
data_10<-data[data[,3]==1.0,1]
data_20<-data[data[,3]==2.0,1]
data_05
data_10
?ToothGrowth
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
data_05<-data[data[,3]==0.5,1]
data_10<-data[data[,3]==1.0,1]
data_20<-data[data[,3]==2.0,1]
t_2<-t.test(data_05, data_10, paired=FALSE, var.equal=FALSE, alternative="greater", conf.level=0.95)
t_2
?t.test
library(ggplot2)
data("ToothGrowth")
data<-ToothGrowth
data_05<-data[data[,3]==0.5,1]
data_10<-data[data[,3]==1.0,1]
data_20<-data[data[,3]==2.0,1]
t_2<-t.test(data_05, data_10, paired=FALSE, var.equal=FALSE, alternative="two.sided", conf.level=0.95)
t_2
t.test(data_05, data_10, paired=FALSE, var.equal=FALSE, alternative="greater", conf.level=0.95)
t.test(data_05, data_10, paired=FALSE, var.equal=FALSE, alternative="greater", conf.level=0.95)
t.test(data_05, data_10, paired=FALSE, var.equal=FALSE, alternative="less", conf.level=0.95)
?hsit
?hist
norm<-matrix(rnorm(nsims,mean=mu,sd=sigma/sqrt(nsamples)),1000,1)
plot(density(norm))
mns<-c()nsims=1000nsamples=40lambda=0.2mu=1/lambdasigma=1/lambdafor(iin1:nsims){mns<-c(mns,rexp(nsamples,lambda))}
norm<-matrix(rnorm(nsims,mean=mu,sd=sigma/sqrt(nsamples)),1000,1)
plot(density(norm))
mns<-c()
nsims=1000
nsamples=40
lambda=0.2
mu=1/lambda
sigma=1/lambda
for(i in 1:nsims){mns<-c(mns,rexp(nsamples,lambda))}
norm<-matrix(rnorm(nsims,mean=mu,sd=sigma/sqrt(nsamples)),1000,1)
plot(density(norm))
library(dplyr)
library(ggplot2)
#Loading and preprocessing
#curr_dir<-dirname(parent.frame(2)$ofile)
#setwd(curr_dir)
#setwd("D:/Arbeit/Fortbildung/Data Mining/Coursera/Data Mining/05_Reproducible Research/project1/repo1/RepData_PeerAssessment1")
data<-read.csv(unz("activity.zip", "activity.csv"),header=TRUE, sep=",", na.strings="NA", col.names=c("Steps", "Date", "Interval"))
data$Date<-as.Date(data$Date, format="%Y-%m-%d")
#Steps per day
steps_per_day<-data%>%group_by(Date)%>%summarise(Steps=sum(Steps))
g1<-ggplot(steps_per_day, aes(x=Steps))+
geom_histogram(binwidth=1000, colour="black", fill="white")+
xlab("Steps")+ylab("Frequency of steps count")+
ggtitle("Frequency of step counts per day")
g1
library(dplyr)
library(ggplot2)
#Loading and preprocessing
#curr_dir<-dirname(parent.frame(2)$ofile)
#setwd(curr_dir)
setwd("D:/Arbeit/Fortbildung/Data Mining/Coursera/Data Mining/05_Reproducible Research/project1/repo1/RepData_PeerAssessment1")
data<-read.csv(unz("activity.zip", "activity.csv"),header=TRUE, sep=",", na.strings="NA", col.names=c("Steps", "Date", "Interval"))
data$Date<-as.Date(data$Date, format="%Y-%m-%d")
#Steps per day
steps_per_day<-data%>%group_by(Date)%>%summarise(Steps=sum(Steps))
g1<-ggplot(steps_per_day, aes(x=Steps))+
geom_histogram(binwidth=1000, colour="black", fill="white")+
xlab("Steps")+ylab("Frequency of steps count")+
ggtitle("Frequency of step counts per day")
g1
source('D:/Arbeit/Fortbildung/Data Mining/Coursera/Data Mining/05_Reproducible Research/project1/repo1/RepData_PeerAssessment1/test1.R')
steps_per_day2<-new_data%>%group_by(Date)%>%summarise(Steps=sum(Steps))
g3<-ggplot(steps_per_day2, aes(x=Steps))+
geom_histogram(binwidth=1000, colour="black", fill="white")+
xlab("Steps")+ylab("Frequency of steps count")+
ggtitle("Frequency of step counts per day")
g3
View(steps_per_day2)
hist(steps_per_day$Steps)
View(steps_per_day)
View(data)
hist(steps_per_day_2$Steps)
hist(steps_per_day2$Steps)
steps_per_day<-data%>%group_by(Date)%>%summarise(Steps=sum(Steps))
g1<-ggplot(steps_per_day, aes(x=Steps))+
geom_histogram(binwidth=1000, colour="black", fill="white")+
xlab("Steps")+ylab("Frequency of steps count")+
ggtitle("Frequency of step counts per day")
g1
hist(steps_per_day2$Steps)
steps_per_day2<-new_data%>%group_by(Date)%>%summarise(Steps=sum(Steps))
g3<-ggplot(steps_per_day2, aes(x=Steps))+
geom_histogram(binwidth=1000, colour="black", fill="white")+
xlab("Steps")+ylab("Frequency of steps count")+
ggtitle("Frequency of step counts per day")
g3
new_data<-new_data%>%mutate(Day=factor(ifelse(as.POSIXlt(new_data$Date)$wday>5, "Weekend", "Weekday")))
steps_per_interval_wd<-new_data%>%group_by(Interval, Day)%>%summarise(Avg_steps=mean(Steps))
g4<-ggplot(steps_per_interval_wd, aes(x=Interval, y=Avg_steps))+
geom_line()+
facet_grid(rows=vars(Day))+
xlab("# of 5-Minute-Interval")+ylab("Average number of steps")+
ggtitle("Average number of steps by # of 5 minute interval")
g4
install.packages("installr")
library(installr)
updateR()
